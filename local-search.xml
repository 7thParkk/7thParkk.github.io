<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>软件系统设计-架构设计背诵</title>
    <link href="/2024/06/22/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%8C%E8%AF%B5/"/>
    <url>/2024/06/22/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E8%83%8C%E8%AF%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="1、ADD（属性驱动设计）"><a href="#1、ADD（属性驱动设计）" class="headerlink" title="1、ADD（属性驱动设计）"></a>1、ADD（属性驱动设计）</h2><h3 id="ADD的步骤"><a href="#ADD的步骤" class="headerlink" title="ADD的步骤"></a>ADD的步骤</h3><ol><li>确定有足够的需求信息</li><li>选择要分解的系统元素</li><li>确定元素的ASR</li><li>选择符合ASR的设计</li><li>实例化架构元素并分配职责</li><li>实例化元素接口</li><li>验证完善需求</li><li>重复2-7，知道满足所有ASR</li></ol><h3 id="ADD输出"><a href="#ADD输出" class="headerlink" title="ADD输出"></a>ADD输出</h3><ol><li>软件元素：履行各种角色和职责的开发工件</li><li>角色：一组相关职责</li><li>责任：软件元素的功能、数据</li><li>属性：软件元素的附加信息</li><li>关系：软件元素的交互、关联定义</li></ol><h2 id="2、ATAM（架构权衡分析方法）"><a href="#2、ATAM（架构权衡分析方法）" class="headerlink" title="2、ATAM（架构权衡分析方法）"></a>2、ATAM（架构权衡分析方法）</h2><p>Architectural Tradeoff Analysis Method：架构权衡分析方法</p><p>四阶段</p><p><strong>阶段0：准备和建立团队</strong></p><ol><li>参与者：评估团队领导和关键项目决策者</li><li>职责：架构设计文档&#x3D;&gt;评估计划</li><li>输入：架构设计文档</li><li>输出：评估计划</li></ol><p><strong>阶段一：评估（1）</strong></p><ol><li>参与者：评估团队和项目决策者</li><li>职责：<ol><li>介绍ATAM</li><li>介绍业务驱动因素</li><li>介绍架构</li><li>确定架构方法</li><li>生成质量属性效用树</li><li>分析架构方法</li></ol></li><li>输出：<ol><li>架构的简明介绍</li><li>业务目标的阐述</li><li>质量属性要求的优先级列表</li><li>效用树</li><li>风险点和无风险点</li><li>敏感点和权衡点</li></ol></li></ol><p><strong>阶段二：评估（2）</strong></p><ol><li>参与者：评估团队、项目决策者、涉众</li><li>职责：<ol><li>头脑风暴确定场景优先级</li><li>分析架构方法</li><li>展示评估结果给涉众</li></ol></li><li>输出：<ol><li>涉众们的优先级列表</li><li>风险主题和业务驱动因素受到的威胁</li></ol></li></ol><p><strong>阶段三：后续</strong></p><ol><li>参与者：评估团队、涉众</li><li>职责：最终评估，结果递交涉众审核，报告交给委托人</li><li>输出：最终评估报告</li></ol><h2 id="3、软件设计策略or架构设计策略"><a href="#3、软件设计策略or架构设计策略" class="headerlink" title="3、软件设计策略or架构设计策略"></a>3、软件设计策略or架构设计策略</h2><ol><li>抽象：忽略底层实现，专注高层的设计</li><li>分解：将系统分解，比如将系统分解为各个模块</li><li>分而治之：每个模块分别处理</li><li>生成与测试</li><li>迭代与优化：迭代，ADD反复迭代直到满足所有ASR</li><li>复用元素</li></ol><h2 id="4、软件架构过程"><a href="#4、软件架构过程" class="headerlink" title="4、软件架构过程"></a>4、软件架构过程</h2><ol><li>创建商业案例 输入：问题域，输出：商业案例</li><li>了解用户需求 输入：用户模糊需求，输出：ASRs</li><li>选择体系结构，输入：备用体系结构，输出：被选中的体系结构</li><li>沟通体系结构 输入：被选中的体系结构 输出：架构设计文档</li><li>评估架构 输入：架构设计文档 输出：最终架构设计文档</li><li>实现体系结构 输入：最终架构设计文档 输出：架构具体实现</li><li>保证一致性 输入：架构具体实现 输出：保证一致性的架构具体实现</li></ol><h2 id="5、质量属性方案建模"><a href="#5、质量属性方案建模" class="headerlink" title="5、质量属性方案建模"></a>5、质量属性方案建模</h2><ol><li>刺激源：产生刺激的实体</li><li>刺激：到达系统需要考虑的条件</li><li>工件：系统的一部分</li><li>环境：此时系统的状况</li><li>响应：应对刺激的反应</li><li>响应度量：以某种方式测试响应，以便测试需求是否达到</li></ol><h2 id="6、风险、权衡、敏感点"><a href="#6、风险、权衡、敏感点" class="headerlink" title="6、风险、权衡、敏感点"></a>6、风险、权衡、敏感点</h2><p><strong>风险</strong>：可能对质量属性产生负面影响的架构决策（比如分层模式可能造成额外的性能损耗）</p><p><strong>权衡：</strong> 影响多个质量属性的架构决策（比如分层消耗性能，但增强系统的可修改性）</p><p><strong>敏感点</strong>：特定质量属性敏感的架构决策。（比如性能敏感的系统，决定使用缓存中间件）</p><h2 id="7、文档不同视角"><a href="#7、文档不同视角" class="headerlink" title="7、文档不同视角"></a>7、文档不同视角</h2><p>不同视图支持不同用户与目标，展现不同元素和关系；不同视图的质量属性暴露程度不同</p><ol><li>逻辑视图：描述了在体系结构上明显重要的元素以及他们之间的关系 Logical view</li><li>过程视图：描述了体系结构中的并发和交流元素 Process view</li><li>物理视图：描述了主要过程和部件是如何映射到应用硬件上的 Physical view</li><li>开发视图：描述了软件部件是如何在软件内部组织的，比如配置管理工具 Development view</li><li>体系结构用例：描述如何实现特定的功能需求 Architecture use cases</li></ol><h2 id="8、软件需求、质量属性、架构攸关需求"><a href="#8、软件需求、质量属性、架构攸关需求" class="headerlink" title="8、软件需求、质量属性、架构攸关需求"></a>8、软件需求、质量属性、架构攸关需求</h2><ol><li><strong>软件需求</strong>：包括功能性需求，非功能性需求和约束<ol><li>功能性需求：功能性需求定义了系统必须做什么并且强调了系统如何提供价值给涉众</li><li>非功能性需求：非功能性需求和体系结构需求是质量属性的替代术语，在任何设计决策中都必须考虑非功能性需求。分为external（比如性能，可用性，易用性），internal（比如可维护性、可移植性等）</li><li>约束：约束是具有零自由度的设计决策</li></ol></li><li>质量属性：质量属性是由业务目标决定的，是非功能性需求在系统上的反应</li><li>架构攸关需求：架构攸关需求是对体系结构有着深远影响的需求，是软件需求的一部分</li></ol><h2 id="9、ASR的来源"><a href="#9、ASR的来源" class="headerlink" title="9、ASR的来源"></a>9、ASR的来源</h2><ol><li>需求文档</li><li>涉众采访</li><li>业务目标</li><li>质量属性实体书树管理：对质量属性细化，直到包含量化指标</li></ol><h2 id="10、architecture、structure、design"><a href="#10、architecture、structure、design" class="headerlink" title="10、architecture、structure、design"></a>10、architecture、structure、design</h2><p>design包含体系结构，体系结构包含结构</p><ol><li>体系结构是设计的一部分，体系结构都是设计，设计不一定是体系结构</li><li>结构是静态、逻辑的，是关于系统如何组成的；体系结构包含结构吗，还有组件之间的联系等动态行为</li></ol><h2 id="11、微服务"><a href="#11、微服务" class="headerlink" title="11、微服务"></a>11、微服务</h2><p>微服务架构是把应用程序功能性分解为一组服务的架构风格，每一个服务都是由一组专注、内聚的功能职责组成。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>通过服务组件化</li><li>内聚和解耦：每一个服务自身高度内聚，服务与服务之间解耦</li><li>围绕业务能力组织</li><li>去中心化</li><li>基础设施自动化</li><li>服务与演进</li></ol><h3 id="挑战"><a href="#挑战" class="headerlink" title="挑战"></a>挑战</h3><ol><li>微服务的拆分和定义，如何拆、结果优劣</li><li>进程间通信机制复杂性高于方法调用、局部故障</li><li>部署复杂性：技术易购、相互隔离、经济高效</li><li>运维复杂性：自动化部署工具、Docker容器编排工具</li></ol><h3 id="SOA-vs-MSA"><a href="#SOA-vs-MSA" class="headerlink" title="SOA vs MSA"></a>SOA vs MSA</h3><p>面向服务体系结构 vs 微服务架构</p><table><thead><tr><th></th><th>SOA</th><th>MSA</th></tr></thead><tbody><tr><td>服务间通信</td><td>1.智能管道，如ESB<br>2.重量级协议，如SOAP</td><td>1. 哑管道，如消息代理，或服务之间点对点通信<br>2.轻量级协议，如REST</td></tr><tr><td>数据管理</td><td>全局数据模型并共享数据库</td><td>每个服务有自己的数据模型和数据库</td></tr><tr><td>典型服务规模</td><td>较大的单体应用</td><td>较小的服务</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>考试复习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件系统设计</tag>
      
      <tag>架构设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/06/21/hello-world/"/>
    <url>/2024/06/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
